import cadquery as cq


# Function that generates a USB-C receptacle port cutout using a height, width, corner radius, and wall thickness
def generate_usb_c(usb_c=None):
    if usb_c is None:
        usb_c = {"height": 4, "width": 11, "corner_radius": 1, "wall_thickness": 2}
    return (
        cq.Workplane()
        .rect(usb_c["width"], usb_c["height"])
        .extrude(usb_c["wall_thickness"])
        .edges("|Z")
        .fillet(usb_c["corner_radius"])
    )


# Function the cuts a USB-C receptacle port from a plane
def add_usb_c(
    plane=None,
    usb_c=None,
    x_offset=0,
    x_rotate=0,
    y_offset=0,
    y_rotate=0,
    z_offset=0,
    z_rotate=0,
):
    # If there is no plane, then none is returned
    if plane is not None:
        # If there is a plane, a port for the usb-c is cut out of it
        if usb_c is not None:
            # The usb-c is generated using generate_usb_c, then translated using the offsets and rotated as necessary
            plane = plane.cut(
                generate_usb_c(usb_c)
                .translate((x_offset, y_offset, z_offset))
                .rotate((0, 0, 0), (1, 0, 0), x_rotate)
                .rotate((0, 0, 0), (0, 1, 0), y_rotate)
                .rotate((0, 0, 0), (0, 0, 1), z_rotate)
            )
    return plane


# Function to generate text for button caps and key caps
def generate_text(text=None):
    # If no text has been passed, an empty Workplane is returned
    if text is None:
        return cq.Workplane()
    # If text is passed, it will generate text for the cap
    else:
        return cq.Workplane().text(
            text["content"],
            text["size"],
            distance=text["depth"],
            font=text["font"],
            halign="center",
            valign="center",
        )


# Function to add text to a plane, taking a plane, the text, and offsets
def add_text(plane=None, text=None, x_offset=0.0, y_offset=0.0, z_offset=0.0):
    # If a plane is not passed, None is returned
    if plane is not None:
        # If there is a plane, text is added to it
        if text is not None:
            # Text is generated using generate_text, then translated using the offsets accounting for depth
            text_workplane = generate_text(text).translate(
                (x_offset, y_offset, z_offset - text["depth"])
            )
            # If the text is more than 0 depth, it is cut out of the plane
            if text["depth"] > 0:
                plane = plane.cut(text_workplane)
            # If the text has a negative depth, it is added to the plane
            elif text["depth"] < 0:
                plane = plane.add(text_workplane)
            # A depth of 0 results in the text not being put on the plane
    return plane


# TODO: Implement
# TODO: Comment
def generate_curve():
    pass


# TODO: Implement
# TODO: Comment
def add_curve():
    pass


# Function used to generate the mounts for key caps and button caps
def generate_mount(mount_values=None):
    # If no mount values are passed, mount_values is instantiated to prevent errors
    if mount_values is None:
        mount_values = {"type": "", "diameter": 0}
    # Create the mount based on the mount type
    if mount_values["type"].upper() == "MX":
        # MX mounts generate the mount's X-Point using the width and length of the X_point
        # the current implementation assumes uniformity of the X_point's arms
        mount_x_point = (
            cq.Workplane()
            .rect(mount_values["X_point_width"], mount_values["X_point_length"])
            .rect(mount_values["X_point_length"], mount_values["X_point_width"])
            .extrude(mount_values["height"])
        )
        # The mount is generated by cutting the X_point out of the mount's radius (diameter/2)
        mount = (
            cq.Workplane()
            .circle(mount_values["diameter"] / 2)
            .extrude(mount_values["height"])
            .cut(mount_x_point)
        )
    elif mount_values["type"].upper() == "STEM":
        # Stem creates a solid mount for the key
        mount = (
            cq.Workplane()
            .circle(mount_values["diameter"] / 2)
            .extrude(mount_values["height"])
        )
    else:
        # raise ValueError("Mount most have a specified type")
        # If there is no mount, an empty workplane is returned
        mount = cq.Workplane()
    return mount


def generate_key_cap(
    units=None, dimensions=None, bevel=False, mount_values=None, text=None
):
    # Parameters derived from the dictionaries values
    top_width = units["top"] * dimensions["width"]
    top_length = units["top"] * dimensions["length"]
    base_width = units["base"] * dimensions["width"]
    base_length = units["base"] * dimensions["length"]
    # Create the base profile and loft to the top profile
    keycap_body = (
        cq.Workplane("XY")
        .rect(base_width, base_length)
        .workplane(offset=dimensions["wall_height"] + dimensions["thickness"])
        .rect(top_width, top_length)
        .loft(combine=True)
    )
    # Create the inner hollow part
    inner_keycap = (
        cq.Workplane("XY")
        .rect(
            (units["base"] - (dimensions["thickness"] * 2)) * dimensions["width"],
            (units["base"] - (dimensions["thickness"] * 2)) * dimensions["length"],
        )
        .workplane(offset=dimensions["wall_height"])
        .rect(
            (top_width - (dimensions["thickness"] * 2)) * dimensions["width"],
            (top_length - (dimensions["thickness"] * 2)) * dimensions["length"],
        )
        .loft(combine=True)
    )
    # Cut out the inner keycap to create the hollow
    keycap = keycap_body.cut(inner_keycap)
    # Add rounded corners if requested
    if bevel:
        keycap = keycap.edges().fillet(0.5)
    # Add text to the keycap
    keycap = add_text(
        plane=keycap,
        text=text,
        x_offset=text.get("x", 0),
        y_offset=text.get("y", 0),
        z_offset=dimensions["thickness"] + dimensions["wall_height"],
    )
    # Generate the mount
    mount = generate_mount(mount_values)
    # Create the cap assembly
    cap = (
        cq.Assembly()
        .add(keycap)
        .add(
            mount,
            loc=cq.Location((0, 0, dimensions["wall_height"] - mount_values["height"])),
        )
    )
    # Return the cap
    return cap


# Function for adding a hole for a key to a plane, using offsets
def add_key_hole(
    plane=None,
    thickness=0,
    width=0,
    length=0,
    x_offset=0.0,
    y_offset=0.0,
    z_offset=0.0,
    rotation=0,
):
    # If a plane is not passed, None is returned
    if plane is not None:
        # If there is a plane, and a diameter is defined, the hole is cut using the parameters
        if width != 0 and length != 0:
            key_hole = (
                cq.Workplane()
                .rect(width, length)
                .extrude(thickness)
                .rotate((0, 0, 0), (0, 0, 1), rotation)
                .translate((x_offset, y_offset, z_offset))
            )
            plane = plane.cut(key_hole)
    return plane


# generate_button_cap is a function for generating button caps
# the function produces a default button cap if no values are passed to it
# the default button is 24mm in diameter and 2mm thick with no walls or  bevel
# the default mount is the Cherry MX clone found on Kailh Red switches
def generate_button_cap(
    diameter=24.0, thickness=2.0, bevel=False, wall=None, mount_values=None, text=None
):
    # Create the top of the button, using the diameter and thickness
    top = cq.Workplane().circle(diameter / 2).extrude(thickness)
    # Add bevel to the button, if it has been requested
    if bevel:
        top = top.faces(">Z").edges().fillet(1)
    # text is added to the top of the button, if text is none this will just return the top
    top = add_text(
        plane=top,
        text=text,
        x_offset=text.get("x", 0),
        y_offset=text.get("y", 0),
        z_offset=thickness,
    )
    # Convert the button cap into an assembly
    cap = cq.Assembly().add(top, loc=cq.Location((0, 0, wall["height"])))
    # If no wall is provided, an empty wall is created
    if wall is None:
        wall = {"thickness": 0.0, "height": 0.0}
    # If the walls have a thickness and height above 0, they are generated then added to the assembly
    # The walls add half the thickness, as the 'height' is the wall size after the button cap starts
    if wall["thickness"] > 0.0 and wall["height"] > 0.0:
        walls = (
            cq.Workplane()
            .circle(diameter / 2)
            .circle((diameter / 2) - wall["thickness"])
            .extrude(wall["height"] + (thickness / 2))
        )
        cap.add(walls)
    # Generate the mount for the button
    mount = generate_mount(mount_values)
    # Combine all parts of the button cap
    cap = cap.add(
        mount, loc=cq.Location((0, 0, wall["height"] - mount_values["height"]))
    )
    # Return the assembled button cap
    return cap


# Function for adding a hole for a button to a plane, using offsets
def add_button_hole(
    plane=None, diameter=0, thickness=0, x_offset=0.0, y_offset=0.0, z_offset=0.0
):
    # If a plane is not passed, None is returned
    if plane is not None:
        # If there is a plane, and a diameter is defined, the hole is cut using the parameters
        if diameter != 0:
            button_hole = (
                cq.Workplane()
                .circle(diameter / 2)
                .extrude(thickness)
                .translate((x_offset, y_offset, z_offset))
            )
            plane = plane.cut(button_hole)
    return plane


# TODO: Implement
# TODO: Comment
def calculate_base_from_buttons():
    pass


# TODO: Convert to generate_simple_base
# TODO: Comment
# TODO: Add 'modular' option to base
# TODO: Generate ModularBase ipynb
# TODO: Create GenerateModularBase
def generate_simple_base(base=None):
    if base is None:
        base = {
            "height": 50,
            "width": 200,
            "length": 100,
            "thickness": 5,
            "rounded_edges": False,
            "screw_radius": 1,
            "corner_radius": 5,
        }
    # TODO: Use dictionary values instead of assigning variable
    height = base["height"]
    width = base["width"]
    length = base["length"]
    thickness = base["thickness"]
    rounded_edges = base["rounded_edges"]
    corner_radius = base["corner_radius"]
    screw_radius = base["screw_radius"]
    # Set corner positions in advance
    positions = [
        (
            -(width / 2 - (thickness + corner_radius)),
            -(length / 2 - (thickness + corner_radius)),
            thickness,
        ),
        (
            -(width / 2 - (thickness + corner_radius)),
            length / 2 - (thickness + corner_radius),
            thickness,
        ),
        (
            width / 2 - (thickness + corner_radius),
            -(length / 2 - (thickness + corner_radius)),
            thickness,
        ),
        (
            width / 2 - (thickness + corner_radius),
            length / 2 - (thickness + corner_radius),
            thickness,
        ),
    ]

    # Create bottom of base
    bottom_base = cq.Workplane().rect(width, length).extrude(height)
    # Add rounded edges to bottom base
    if rounded_edges:
        bottom_base = bottom_base.fillet(1)
    inner_base = (
        cq.Workplane()
        .rect(width - (thickness * 2), length - (thickness * 2))
        .extrude(height - thickness)
    )
    bottom_base = bottom_base.cut(inner_base)
    # Add corners for screw/plugs to bottom base
    corner = cq.Workplane().circle(corner_radius).extrude(height - thickness)
    corners = cq.Workplane()
    for pos in positions:
        corners = corners.union(corner.translate(pos))
    bottom_base = bottom_base.union(corners)
    # Add the screw holes or slots to the bottom base
    corner_holes = cq.Workplane()
    if screw_radius > 0.0:
        corner_hole = (
            cq.Workplane().circle(screw_radius).extrude(height - (thickness * 2))
        )
    else:
        corner_hole = cq.Workplane().circle(corner_radius / 2).extrude(thickness)
    for pos in positions:
        corner_holes = corner_holes.union(corner_hole.translate(pos))
    bottom_base = bottom_base.cut(corner_holes)
    # Create top base
    top_base = (
        cq.Workplane()
        .rect(width - (thickness * 2) - 0.5, length - (thickness * 2) - 0.5)
        .extrude(thickness)
    )
    # Add the screw holes or slots to the top base
    if screw_radius > 0.0:
        top_base = top_base.cut(corner_holes.translate((0, 0, -thickness)))
    else:
        top_base = top_base.union(corner_holes.translate((0, 0, 0)))
    return top_base, bottom_base


# TODO: Comment
# TODO: Add printer
def generate_controller(
    base=None,
    buttons=None,
    keys=None,
):
    if base.get("modular", False):
        pass
    key_steps = keys
    base_top, base_bottom = generate_simple_base(base)
    button_steps = []
    if buttons is not None:
        for button_name, button_values in buttons.items():
            button_steps.append(
                [
                    generate_button_cap(
                        diameter=button_values.get("diameter", 24.0),
                        thickness=button_values.get("thickness", 2.0),
                        bevel=button_values.get("bevel", False),
                        mount_values=button_values.get("mount", None),
                        wall=button_values.get("wall", None),
                        text=button_values.get("text", None),
                    ),
                    button_name,
                ]
            )
            offset_x = base["width"] / 2
            offset_y = base["length"] / 2

    return base_top, base_bottom, button_steps, []


# TODO: Comment
# TODO: Add printer
def generate_controller_files(
    path="generated_files/", base=None, buttons=None, keys=None
):
    if base is None:
        calculate_base_from_buttons()
    base_top, base_bottom, button_steps, key_steps = generate_controller(
        base=base, buttons=buttons, keys=keys
    )
    cq.exporters.export(base_top, path + "base_top.step")
    cq.exporters.export(base_bottom, path + "base_bottom.step")
    for button in button_steps:
        button[0].save(path + button[1] + ".step")
    for key in key_steps:
        key[0].save(path + key[1] + ".step")


# TODO: Comment
if __name__ == "__main__":
    buttons_dict = {
        "UP": {
            "x": 20,
            "y": 15,
            "diameter": 30.0,
            "thickness": 2.0,
            "bevel": False,
            "mount": {
                "type": "MX",
                "height": 4.0,
                "diameter": 6.0,
                "X_point_width": 4.2,
                "X_point_length": 1.4,
            },
            "wall": {
                "thickness": 1.0,
                "height": 3.0,
            },
            "text": {"content": "UP", "size": 12, "depth": 1, "font": "Arial"},
        },
        "DOWN": {
            "x": 70,
            "y": 30,
            "diameter": 24.0,
            "thickness": 2.0,
            "bevel": True,
            "mount": {
                "type": "MX",
                "height": 4.0,
                "diameter": 6.0,
                "X_point_width": 4.2,
                "X_point_length": 1.4,
            },
            "wall": {
                "thickness": 1.0,
                "height": 2.0,
            },
            "text": {
                "content": "down",
                "size": 12,
                "depth": -1,
                "font": "Arial",
                "x": 0,
                "y": 0,
            },
        },
        "LEFT": {
            "x": 60,
            "y": 20,
            "diameter": 24.0,
            "thickness": 2.0,
            "bevel": True,
            "mount": {
                "type": "MX",
                "height": 4.0,
                "diameter": 6.0,
                "X_point_width": 4.2,
                "X_point_length": 1.4,
            },
            "wall": {
                "thickness": 0.0,
                "height": 0.0,
            },
            "text": {
                "content": "LeFt",
                "size": 12,
                "depth": -1,
                "font": "Arial",
                "x": 0,
                "y": 0,
            },
        },
    }
    base_dict = {
        "height": 25,
        "width": 200,
        "length": 100,
        "thickness": 2.5,
        "rounded_edges": True,
        "screw_radius": 1,
        "corner_radius": 5,
    }
    keys_dict = {
        "A": {
            "x": 70,
            "y": 30,
            "bevel": True,
            "mount": {
                "type": "MX",
                "height": 4.0,
                "diameter": 6.0,
                "X_point_width": 4.2,
                "X_point_length": 1.4,
            },
            "units": {"top": 15, "base": 20},
            "dimensions": {"width": 1, "length": 1, "wall_height": 10, "thickness": 2},
            "text": {
                "content": "A",
                "size": 12,
                "depth": -1,
                "font": "Arial",
                "x": 1,
                "y": 1,
            },
        },
        "B": {
            "x": 40,
            "y": 20,
            "rotation": 45,
            "bevel": False,
            "mount": {
                "type": "MX",
                "height": 4.0,
                "diameter": 6.0,
                "X_point_width": 4.2,
                "X_point_length": 1.4,
            },
            "units": {"top": 20, "base": 25},
            "dimensions": {"width": 1, "length": 1, "wall_height": 5, "thickness": 2},
            "text": {
                "content": "B",
                "size": 12,
                "depth": 1,
                "font": "Arial",
                "x": -1,
                "y": -1,
            },
        },
    }
    generate_controller_files(
        path="test_files/", base=base_dict, buttons=buttons_dict, keys=keys_dict
    )
